#!/bin/bash

# https://riptutorial.com/dropbox-api/example/1376/retrieving-an-existing-shared-link-for-a-specific-file-using-curl
# https://riptutorial.com/dropbox-api/topic/414/getting-a-shared-link-for-a-file-or-folder
# https://riptutorial.com/dropbox-api/example/1378/creating-a-shared-link-for-a-file-using-curl

####################################################################################################
### ------------------------------------- Instruction to setup ----------------------------------###

# You must have Dropbox account
# Open in browser https://www.dropbox.com/developers/apps
# Select "Create app"
# Select "Scoped access"
# Select "App folder"
# Set "Name your app"
# Set permissions files.metadata.write, files.content.write, sharing.write, file_requests.write
# Generate "OAuth 2" and insert it below

key='Insert here OAuth2 key'																# Key OAuth2
path_for_log="$HOME/Dropbox/.dropbox_history"													# Path for log file. Keep it clear if you don`t want to save log.

remote_path="/Приложения/fast_upload"													# Dropbox remote path with app folder
local_path="$HOME/Dropbox/Приложения/fast_upload"							# Dropbox local path with app folder
path_to_dbxcli="$HOME/app/dbxcli/dbxcli"												# Path to dbxcli (https://github.com/dropbox/dbxcli). Used for delete files from dropbox server directly.

days_keep=90																					# Days to keep files before delete. Old files will be delete.
size_keep=500																					# If size of folder "local_path" is bigger than "size_keep", old files will be delete.

####################################################################################################
### ------------------------------------- Script ----------------------------------------------- ###

if [ $# != 0 ]																				# Проверяем были ли переданы сценарию данные
	then
		number_files=`find "$@" -type f -print | wc -l`							# Количество выбранных файлов

		for ADD in $( find "$@" -type f -exec stat '--printf=%s ' {} \; )	# Рассчитываем суммарный объём
			do
				total_size=$(( ${total_size} + $ADD ))
			done
		if [ $total_size -lt 1024 ]													# Выбираем единицы для отображения общего объема в прогрессе
			then total_size_print=$total_size" байт"
		elif [ $total_size -lt 1048576 ]
			then total_size_print=$(( $total_size /1024 ))" Кбайт"
		elif [ $total_size -lt 1073741824  ]
			then total_size_print=$(( $total_size /1024/1024 ))" Мбайт"
		fi

		folder_to_upload=`date +%Y-%m-%d_%H-%M-%S`								# Генерируем имя каталога для загрузки из текущих даты и времени
		echo; echo ${folder_to_upload}; echo

		find "$@" -type f -print0 | (while read -d $'\0' file					# Получаем список и обрабатываем выбранные файлы 
			do
				# Загружаем файл
				curl -X POST https://content.dropboxapi.com/2/files/upload \
					--header "Authorization: Bearer $key" \
					--header "Dropbox-API-Arg: {\"path\": \"/${folder_to_upload}/$file\"}" \
					--header "Content-Type: application/octet-stream" \
					--data-binary @"$file" > /dev/null

				# Копируем файл в локальную папку
				mkdir "${local_path}/${folder_to_upload}"
				if [[ `echo "$file" | grep "/"` ]]
					then cp --parents "$file" "${local_path}/${folder_to_upload}/"	# Если выделен каталог с файлами
					else cp "$file" "${local_path}/${folder_to_upload}/$file"		# Если выделен файл
				fi

				file_size=`stat --printf=%s "$file"`								# Получение размера файла
				uploaded_size=$(( ${uploaded_size} + ${file_size} ))			# Расчёт загруженного объема
				if [ $uploaded_size -lt 1024 ]										# Выбираем единицы для отображения загруженного в прогрессе
					then uploaded_size_print=$uploaded_size" байт"
				elif [ $uploaded_size -lt 1048576 ]
					then uploaded_size_print=$(( $uploaded_size /1024 ))" Кбайт"
				elif [ $uploaded_size -lt 1073741824  ]
					then uploaded_size_print=$(( $uploaded_size /1024/1024 ))" Мбайт"
				fi

				#progress=$(( $progress + 100/${number_files} ))				# Расчет прогресса по количеству загруженных файлов
				progress=$(( 100 * $uploaded_size / $total_size ))				# Расчет прогресса по загруженному объему
				counter=$(( $counter + 1 ))
				echo $progress
				echo "# Загружено файлов $counter из ${number_files}\n${uploaded_size_print} из ${total_size_print}"
			done)|zenity --progress --title="Dropbox" --auto-close --auto-kill --width=250

		if [ ${number_files} = 1 ]
			then path="${folder_to_upload}/$1"										# Если загружается только один файл, создаем ссылку непосредственно на файл
			else path="${folder_to_upload}"											# Если загружается несколько файлов, создаем ссылку на каталог
		fi
		echo; echo "path = ${folder_to_upload}/$file"; echo

		# Создаём общую ссылку
		output=`curl -X POST https://api.dropboxapi.com/2/sharing/create_shared_link_with_settings \
			--header "Authorization: Bearer $key" \
			--header "Content-Type: application/json" \
			--data "{\"path\": \"/$path\",\"settings\": {\"requested_visibility\": \"public\"}}"`

		# Получаем общую ссылку созданную ранее. Не требуется так как ссылка передаётся при создании выше.
		#output=`curl -X POST https://api.dropboxapi.com/2/sharing/list_shared_links \
		#	--header "Authorization: Bearer $key" \
		#	--header "Content-Type: application/json" \
		#	--data "{\"path\": \"/$path\", \"direct_only\": true}"`
		echo; echo $output; echo
		
		# Проверяем наличие ссылки и выводим уведомление
		if [[ `echo "$output" | grep "https://www.dropbox.com/"` ]]
			then
				link=`echo $output | grep -Po 'https:.*' | grep -Po '.*dl=0'`	# Вырезаем ссылку из вывода curl
				echo; echo "link = $link"; echo
				echo -n "$link" | xclip -i -selection clipboard						# Записываем ссылку в буфер обмена
				notify-send -t 10000 -i "gtk-ok" "Загрузка на Dropbox завершена" "Ссылка скопирована в буфер обмена:\n$link"
			else
				notify-send -t 10000 -i "error" "Dropbox" "При загрузке возникла ошибка: $status"
		fi

		# Записываем историю
		if [ "${path_for_log}" != "" ]
			then
				for file in "$@"
					do list_files="${list_files}""$file""; "					# Преобразуем список выделенных элементов в строку
				done

				ex -s -c "1i| " -c x "${path_for_log}"							# Добавляем в файл истории пустую строку
				ex -s -c "1i|$link" -c x "${path_for_log}"					# Добавляем в файл истории ссылку
				ex -s -c "1i|$list_files" -c x "${path_for_log}"			# Добавляем в файл истории список выделенных элементов
				ex -s -c "1i|${folder_to_upload}" -c x "${path_for_log}"	# Добавляем в файл истории имя каталог с загруженными файлами
		fi
		
		# Очистка старых файлов по времени
		if [ -f "${path_to_dbxcli}" ]																								# Если присутствует dbxcli
			then
				"${path_to_dbxcli}" ls -l ${remote_path} | while read line												# Получаем список каталогов
					do
						data_from_server="${line##*/}"																			# Получаем путь из строки
						if [[ "${data_from_server:0:10}" == $(date -d "${data_from_server:0:10}" "+%Y-%m-%d" 2>/dev/null) ]]	# Если строка является датой в указанном формате
							then
								data_check=$(date +%Y-%m-%d_%H-%M-%S -d "- ${days_keep} days")							# Вычисляем дату после которой необходимо удалять старые файлы
								if [[ "$data_check" > "${data_from_server}" ]]
									then "${path_to_dbxcli}" rm --force "${remote_path}/${data_from_server}"		# Удаляем старые файлы на сервере	
								fi
						fi
					done			
				# Удаляем старые файлы локально
				if [ `echo "${local_path}" | grep -i "dropbox"` ]															# Для защиты проверяем содержит ли путь слово "dropbox"
					then find ${local_path} -mtime +${days_keep} -type d -exec rm --force --recursive {} \;	# Удаляем старые каталоги
				fi
			else
				notify-send -t 10000 -i "error" "Dropbox" "Отсутствует утилита dbxcli"
		fi

		# Очистка старых файлов при превышении допустимого суммарного размера
		size_local=`du --summarize --block-size=M "${local_path}"`
		size_local=${size_local%%M*}
		if [ $size_keep -gt 0 ]
			then
				while [[ $size_keep -lt $size_local ]]
					do
						older_folder=`ls $local_path | head -1`									# Старший каталог
						rm -rf "$local_path/$older_folder"											# Удаляем старший каталог локально
						size_local=`du --summarize --block-size=M "${local_path}"`
						size_local=${size_local%%M*}
						"${path_to_dbxcli}" rm --force "${remote_path}/$older_folder"		# Удаляем старший каталог на сервере
				done
		fi
		
	else
		echo; echo "Сценарию не были переданы элементы"; echo
	fi
